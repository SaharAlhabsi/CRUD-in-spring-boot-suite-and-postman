package com.example.controller;

import java.util.Optional;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;


import com.example.model.StudentGraduation;
import com.example.service.StudentService;





@RestController
@RequestMapping(path="/student")
public class MainController {
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
private StudentService userRepository;
	//add
	@PostMapping("/add")
	StudentGraduation create(@RequestBody StudentGraduation student) {
	    return userRepository.save(student);
}
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (
			@RequestParam String email
			, @RequestParam String major,@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		StudentGraduation n = new StudentGraduation();
		
		
		n.setEmail(email);
		n.setMajor(major);
		n.setName(name);
		userRepository.save(n);
		return "Saved";
	}
//find
	@GetMapping("/all")
	  Iterable<StudentGraduation> read() {
	    return userRepository.findAll();
}
	@GetMapping("/{id}")
	  Optional<StudentGraduation> findById(@PathVariable Integer id){
			  return userRepository.findById(id);
			  
	  }
	@GetMapping("/name")
	String findByQuery(@RequestParam String name,@RequestParam String email,@RequestParam String major){ 
			return StudentService.findByName(name,email,major);
				  }
			  
	  
	@PutMapping("update")
	StudentGraduation update(@RequestBody StudentGraduation student) {
	    return userRepository.save(student);
}
	@GetMapping(path="/update1") // Map ONLY GET Requests
	public @ResponseBody String updateStudent (@RequestParam String email
			, @RequestParam String major,@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		StudentGraduation n = new StudentGraduation();
		
		n.setEmail(email);
		n.setMajor(major);
		n.setName(name);
		userRepository.save(n);
		return "Updated";
	}
//update
//	@RequestMapping(value ="/update", method = RequestMethod.POST)
//	String update(@RequestParam String name
//			, @RequestParam String email,@RequestParam int phone) {
//		Student n = new Student();
//		n.setName(name);
//		n.setEmail(email);
//		n.setphone(phone);
//		userRepository.save(n);
//		return "Saved";
////	    return userRepository.save(name,email,phone);
//}
//	 @RequestMapping(value = "/{id}/update", method = RequestMethod.GET)
//	    public String edit(@PathVariable long id,
//	                       Model model) {
//	        Student st = userRepository.findOne(id);
//	        model.addAttribute("post", st);
//	        return "student/update";
//	    }

//	@GetMapping("/search")
//	  Iterable<Student> findByQuery(
//	  @RequestParam("name") String name)
//	  { 
//		  return StudentService.findByName(name);
//	  }

//	@PutMapping("/student")
//	  String update1(@RequestParam String name
//				, @RequestParam String email,@RequestParam int phone) {
//		Student n = new Student();
//		n.setName(name);
//		n.setEmail(email);
//		n.setphone(phone);
//		userRepository.save(n);
//		return "Saved";
//}
//	@PutMapping("/update/{id}")
//	public String update(@PathVariable(value = "id") int id,
//	                                        @Valid @RequestBody Student Details) {
//
//	    userRepository.findById(id);
//
//	   
//	    Details.setName(Details.getName());
//	    Details.setEmail(Details.getEmail());
//	    Details.setphone(Details.getphone());
//	    userRepository.save(Details);
//	    
//	  return "updated";
//	}

	@DeleteMapping("/delete/{id}")
	  void delete(@PathVariable Integer id) {
		userRepository.deleteById(id);
}

}
